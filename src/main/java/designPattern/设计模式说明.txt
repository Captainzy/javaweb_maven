行为型模式：用于描述类或对象怎样交互和怎样分配职责的问题
创建型模式：主要用于创建对象
结构型模式：用于处理类或对象的组合问题

设计模式遵循的原则：
单一职责原则、开闭原则、里氏代换原则、依赖倒转原则、接口隔离原则、合成复用原则、迪米特法原则

单一职责原则：一个类，只有一个引起它变化的原因，就只有一个职责。每一个职责都是变化的一个轴线，如果一个类有一个以上的职责，这些职责就耦合在了一起。这会导致脆弱的设计。当一个职责发生变化时，可能会影响其它的职责。
开闭原则：“开”，是指对于组件功能的扩展是开放的，是允许对其进行功能扩展的；“闭”，是指对于原有代码的修改是封闭的，即修改原有的代码对外部的使用是透明的。
里氏代换原则：任何基类可以出现的地方，子类一定可以出现。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。
依赖倒转原则：是程序要依赖于抽象接口，不要依赖于具体实现。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。
接口隔离原则：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。
合成复用原则（组合/聚合复用原则）：尽量使用对象组合，而不是继承来达到复用的目的。
迪米特法原则（最少知道原则）：一个软件实体应当尽可能少的与其他实体发生相互作用。应用迪米特法则有可能造成的一个后果就是：系统中存在大量的中介类，这些类之所以存在完全是为了传递类之间的相互调用关系——这在一定程度上增加了系统的复杂度。门面模式（Facade）和中介模式（Mediator），都是迪米特法则应用的例子。
