<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">

	<!-- 激活bean的注解配置 -->
	<context:annotation-config />
	<!-- 启用aspectj
		 proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。
		 如果proxy-target-class 属性值被设置为true，那么是基于CGLIB类代理（这时需要cglib库）。
		 如果proxy-target-class属值被设置为false或者这个属性被省略，那么标准的JDK 基于接口的代理。
		 -基于JDK动态代理 ，可以将@Transactional放置在接口和具体类上。
		 -基于CGLIB类代理，只能将@Transactional放置在具体类上，如果放在接口上则无法实现事务（报错）。
		 -因此 在实际开发时全部将@Transactional放到具体类上，而不是接口上。
	 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 激活springmvc 注解 -->
	<mvc:annotation-driven validator="validator" >
		<!-- spring返回json数据时将null数据转为空串"" -->
		<mvc:message-converters> 
	        <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"> 
	            <property name="objectMapper"> 
	                <bean class="applicationListener.JsonObjectMapper"></bean> 
	            </property> 
	        </bean> 
	    </mvc:message-converters> 
	</mvc:annotation-driven>

	<!-- 注解扫描 -->
	<context:component-scan
		base-package="aop,applicationListener,controllerTest,springFramework,upload,websocket,validator" />

	<!-- 视图解析器 -->
	<bean id="jspViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="1" />
	</bean>

	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<property name="maxUploadSize" value="2000000000" />
		<property name="maxInMemorySize" value="102400" />
	</bean>
	<!-- 拦截所有URL -->
	<mvc:interceptors>
		<bean class="springFramework.interceptor.MyInterceptor"></bean>
	</mvc:interceptors>
	<!-- 拦截匹配URL -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**/*Test" />
			<mvc:mapping path="/**/test" />
			<bean class="springFramework.interceptor.TestInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	<!-- <websocket:handlers> <websocket:mapping handler="" path=""/> </websocket:handlers> 
		<bean id="myHandler" class="springFramework.websocket.MyHandler"></bean> -->

	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<property name="validationMessageSource" ref="messageSource" />
	</bean>

	<!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:validatorMessages</value>
			</list>
		</property>
		<property name="defaultEncoding" value="UTF-8" />
		<!-- 对资源文件内容缓存时间，单位秒 -->
		<property name="cacheSeconds" value="60" />
	</bean>
	<!-- web.xml里error-page标签配置的异常页面也配置上，两个异常处理的维度是不一样的，简单说，spring的resolver是spring内部使用的，而web。xml里的是整个webapp共同使用的。建议两个都配置上 -->
	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView" value="error"></property>
		<property name="defaultStatusCode" value="500"></property>
		<property name="exceptionAttribute" value="exception"></property>
		<property name="statusCodes">
			<props>
				<prop key="500">500</prop>
				<prop key="404">404</prop>
			</props>
		</property>

		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.Exception">error</prop>
			</props>
		</property>
	</bean>
</beans>
